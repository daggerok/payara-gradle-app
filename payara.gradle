import org.apache.tools.ant.taskdefs.condition.Os

static String getDeployCommand(Project project) {
    def payaraMicroJar = project.configurations.payaraMicro.asPath
    "java -jar ${payaraMicroJar} --autoBindHttp --deploy ${getLibsDir(project)}/${project.war.archiveName}"
}

static String getLibsDir(Project project) {
    "${project.buildDir}/libs"
}

static String getOutputUberJar(Project project) {
    "${project.name}-uber.jar"
}

static String[] getCommand(String... suffix) {
    String[] prefix = Os.isFamily(Os.FAMILY_WINDOWS) ? ['cmd', '/c'] : ['sh', '-c']
    prefix + suffix
}

apply plugin: 'base'

defaultTasks('clean', 'makeJarNotWar')

clean.doFirst {
    delete "${getLibsDir(project)}/${getOutputUberJar(project)}" as String
}

apply plugin: 'war'

war {
    // workaround for context-root: '/'
    archiveName = 'ROOT.war'
}

configurations {
    payaraMicro
}

dependencies {
    // 5.183 is broken, Uber Jar is fixed with 5.184
    payaraMicro 'fish.payara.extras:payara-micro:5.182'
}

task run(type: Exec) {
    description('run payara-micro')
    shouldRunAfter('clean', 'war')
    dependsOn('war')
    commandLine getCommand("${getDeployCommand(project)} --autoBindHttp")
}

task makeJarNotWar(type: Exec) {
    description('build payara uber jar from war')
    shouldRunAfter('clean', 'war')
    dependsOn('war')
    commandLine getCommand("${getDeployCommand(project)} --outputUberJar ${getLibsDir(project)}/${getOutputUberJar(project)}")
}

/*
    read more about payara and payara-micro here:
    - https://info.payara.fish/payara-micro-data-sheet
    - https://www.payara.fish/
    - https://github.com/payara/Payara
 */
